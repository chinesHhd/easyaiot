<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.basiclab.iot.device.dal.pgsql.protocol.ProtocolMapper">
    <resultMap id="BaseResultMap" type="com.basiclab.iot.device.domain.device.vo.Protocol">
        <!--@mbg.generated-->
        <!--@Table protocol-->
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="product_identification" jdbcType="VARCHAR" property="productIdentification"/>
        <result column="app_id" jdbcType="VARCHAR" property="appId"/>
        <result column="protocol_name" jdbcType="VARCHAR" property="protocolName"/>
        <result column="protocol_identification" jdbcType="VARCHAR" property="protocolIdentification"/>
        <result column="protocol_version" jdbcType="VARCHAR" property="protocolVersion"/>
        <result column="protocol_type" jdbcType="VARCHAR" property="protocolType"/>
        <result column="protocol_voice" jdbcType="VARCHAR" property="protocolVoice"/>
        <result column="class_name" jdbcType="VARCHAR" property="className"/>
        <result column="file_path" jdbcType="VARCHAR" property="filePath"/>
        <result column="content" jdbcType="LONGVARCHAR" property="content"/>
        <result column="status" jdbcType="VARCHAR" property="status"/>
        <result column="create_by" jdbcType="VARCHAR" property="createBy"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_by" jdbcType="VARCHAR" property="updateBy"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="remark" jdbcType="VARCHAR" property="remark"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        id,
        app_id,
        product_identification,
        protocol_name,
        protocol_identification,
        protocol_version,
        protocol_type,
        protocol_voice,
        class_name,
        file_path,
        content,
        "status",
        create_by,
        create_time,
        update_by,
        update_time,
        remark
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        <!--@mbg.generated-->
        select
        <include refid="Base_Column_List"/>
        from protocol
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        <!--@mbg.generated-->
        delete
        from protocol
        where id = #{id,jdbcType=BIGINT}
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id"
            parameterType="com.basiclab.iot.device.domain.device.vo.Protocol" useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into protocol (product_identification, app_id, protocol_name,
                              protocol_identification, protocol_version,
                              protocol_type, protocol_voice, class_name,
                              file_path, content, "status",
                              create_by, create_time, update_by,
                              update_time, remark)
        values (#{productIdentification,jdbcType=VARCHAR}, #{appId,jdbcType=VARCHAR}, #{protocolName,jdbcType=VARCHAR},
                #{protocolIdentification,jdbcType=VARCHAR}, #{protocolVersion,jdbcType=VARCHAR},
                #{protocolType,jdbcType=VARCHAR}, #{protocolVoice,jdbcType=VARCHAR}, #{className,jdbcType=VARCHAR},
                #{filePath,jdbcType=VARCHAR}, #{content,jdbcType=LONGVARCHAR}, #{status,jdbcType=VARCHAR},
                #{createBy,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateBy,jdbcType=VARCHAR},
                #{updateTime,jdbcType=TIMESTAMP}, #{remark,jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" keyColumn="id" keyProperty="id"
            parameterType="com.basiclab.iot.device.domain.device.vo.Protocol" useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into protocol
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="productIdentification != null">
                product_identification,
            </if>
            <if test="protocolName != null">
                protocol_name,
            </if>
            <if test="protocolIdentification != null">
                protocol_identification,
            </if>
            <if test="protocolVersion != null">
                protocol_version,
            </if>
            <if test="protocolType != null">
                protocol_type,
            </if>
            <if test="protocolVoice != null">
                protocol_voice,
            </if>
            <if test="className != null">
                class_name,
            </if>
            <if test="filePath != null">
                file_path,
            </if>
            <if test="content != null">
                content,
            </if>
            <if test="status != null">
                "status",
            </if>
            create_by,
            create_time,
            update_by,
            update_time,
            <if test="remark != null">
                remark,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="productIdentification != null">
                #{productIdentification,jdbcType=VARCHAR},
            </if>
            <if test="protocolName != null">
                #{protocolName,jdbcType=VARCHAR},
            </if>
            <if test="protocolIdentification != null">
                #{protocolIdentification,jdbcType=VARCHAR},
            </if>
            <if test="protocolVersion != null">
                #{protocolVersion,jdbcType=VARCHAR},
            </if>
            <if test="protocolType != null">
                #{protocolType,jdbcType=VARCHAR},
            </if>
            <if test="protocolVoice != null">
                #{protocolVoice,jdbcType=VARCHAR},
            </if>
            <if test="className != null">
                #{className,jdbcType=VARCHAR},
            </if>
            <if test="filePath != null">
                #{filePath,jdbcType=VARCHAR},
            </if>
            <if test="content != null">
                #{content,jdbcType=LONGVARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=VARCHAR},
            </if>
            #{createBy,jdbcType=VARCHAR},
            #{createTime,jdbcType=TIMESTAMP},
            #{updateBy,jdbcType=VARCHAR},
            #{updateTime,jdbcType=TIMESTAMP},
            <if test="remark != null">
                #{remark,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.basiclab.iot.device.domain.device.vo.Protocol">
        <!--@mbg.generated-->
        update protocol
        <set>
            <if test="productIdentification != null">
                product_identification = #{productIdentification,jdbcType=VARCHAR},
            </if>
            <if test="appId != null">
                app_id = #{appId,jdbcType=VARCHAR},
            </if>
            <if test="protocolName != null">
                protocol_name = #{protocolName,jdbcType=VARCHAR},
            </if>
            <if test="protocolIdentification != null">
                protocol_identification = #{protocolIdentification,jdbcType=VARCHAR},
            </if>
            <if test="protocolVersion != null">
                protocol_version = #{protocolVersion,jdbcType=VARCHAR},
            </if>
            <if test="protocolType != null">
                protocol_type = #{protocolType,jdbcType=VARCHAR},
            </if>
            <if test="protocolVoice != null">
                protocol_voice = #{protocolVoice,jdbcType=VARCHAR},
            </if>
            <if test="className != null">
                class_name = #{className,jdbcType=VARCHAR},
            </if>
            <if test="filePath != null">
                file_path = #{filePath,jdbcType=VARCHAR},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=LONGVARCHAR},
            </if>
            <if test="status != null">
                "status" = #{status,jdbcType=VARCHAR},
            </if>
            <if test="createBy != null">
                create_by = #{createBy,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateBy != null">
                update_by = #{updateBy,jdbcType=VARCHAR},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="remark != null">
                remark = #{remark,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.basiclab.iot.device.domain.device.vo.Protocol">
        <!--@mbg.generated-->
        update protocol
        set product_identification  = #{productIdentification,jdbcType=VARCHAR},
            protocol_name           = #{protocolName,jdbcType=VARCHAR},
            protocol_identification = #{protocolIdentification,jdbcType=VARCHAR},
            protocol_version        = #{protocolVersion,jdbcType=VARCHAR},
            protocol_type           = #{protocolType,jdbcType=VARCHAR},
            protocol_voice          = #{protocolVoice,jdbcType=VARCHAR},
            class_name              = #{className,jdbcType=VARCHAR},
            file_path               = #{filePath,jdbcType=VARCHAR},
            content                 = #{content,jdbcType=LONGVARCHAR},
            "status"                = #{status,jdbcType=VARCHAR},
            create_by               = #{createBy,jdbcType=VARCHAR},
            create_time             = #{createTime,jdbcType=TIMESTAMP},
            update_by               = #{updateBy,jdbcType=VARCHAR},
            update_time             = #{updateTime,jdbcType=TIMESTAMP},
            remark                  = #{remark,jdbcType=VARCHAR}
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateBatch" parameterType="java.util.List">
        <!--@mbg.generated-->
        update protocol
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="product_identification = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.productIdentification,jdbcType=VARCHAR}
                </foreach>
            </trim>
            <trim prefix="protocol_name = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.protocolName,jdbcType=VARCHAR}
                </foreach>
            </trim>
            <trim prefix="protocol_identification = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.protocolIdentification,jdbcType=VARCHAR}
                </foreach>
            </trim>
            <trim prefix="protocol_version = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.protocolVersion,jdbcType=VARCHAR}
                </foreach>
            </trim>
            <trim prefix="protocol_type = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.protocolType,jdbcType=VARCHAR}
                </foreach>
            </trim>
            <trim prefix="protocol_voice = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.protocolVoice,jdbcType=VARCHAR}
                </foreach>
            </trim>
            <trim prefix="class_name = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.className,jdbcType=VARCHAR}
                </foreach>
            </trim>
            <trim prefix="file_path = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.filePath,jdbcType=VARCHAR}
                </foreach>
            </trim>
            <trim prefix="content = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.content,jdbcType=LONGVARCHAR}
                </foreach>
            </trim>
            <trim prefix="'status' = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.status,jdbcType=VARCHAR}
                </foreach>
            </trim>
            <trim prefix="create_by = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.createBy,jdbcType=VARCHAR}
                </foreach>
            </trim>
            <trim prefix="create_time = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.createTime,jdbcType=TIMESTAMP}
                </foreach>
            </trim>
            <trim prefix="update_by = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.updateBy,jdbcType=VARCHAR}
                </foreach>
            </trim>
            <trim prefix="update_time = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.updateTime,jdbcType=TIMESTAMP}
                </foreach>
            </trim>
            <trim prefix="remark = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    when id = #{item.id,jdbcType=BIGINT} then #{item.remark,jdbcType=VARCHAR}
                </foreach>
            </trim>
        </trim>
        where id in
        <foreach close=")" collection="list" item="item" open="(" separator=", ">
            #{item.id,jdbcType=BIGINT}
        </foreach>
    </update>
    <update id="updateBatchSelective" parameterType="java.util.List">
        <!--@mbg.generated-->
        update protocol
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="product_identification = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.productIdentification != null">
                        when id = #{item.id,jdbcType=BIGINT} then #{item.productIdentification,jdbcType=VARCHAR}
                    </if>
                </foreach>
            </trim>
            <trim prefix="protocol_name = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.protocolName != null">
                        when id = #{item.id,jdbcType=BIGINT} then #{item.protocolName,jdbcType=VARCHAR}
                    </if>
                </foreach>
            </trim>
            <trim prefix="protocol_identification = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.protocolIdentification != null">
                        when id = #{item.id,jdbcType=BIGINT} then #{item.protocolIdentification,jdbcType=VARCHAR}
                    </if>
                </foreach>
            </trim>
            <trim prefix="protocol_version = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.protocolVersion != null">
                        when id = #{item.id,jdbcType=BIGINT} then #{item.protocolVersion,jdbcType=VARCHAR}
                    </if>
                </foreach>
            </trim>
            <trim prefix="protocol_type = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.protocolType != null">
                        when id = #{item.id,jdbcType=BIGINT} then #{item.protocolType,jdbcType=VARCHAR}
                    </if>
                </foreach>
            </trim>
            <trim prefix="protocol_voice = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.protocolVoice != null">
                        when id = #{item.id,jdbcType=BIGINT} then #{item.protocolVoice,jdbcType=VARCHAR}
                    </if>
                </foreach>
            </trim>
            <trim prefix="class_name = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.className != null">
                        when id = #{item.id,jdbcType=BIGINT} then #{item.className,jdbcType=VARCHAR}
                    </if>
                </foreach>
            </trim>
            <trim prefix="file_path = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.filePath != null">
                        when id = #{item.id,jdbcType=BIGINT} then #{item.filePath,jdbcType=VARCHAR}
                    </if>
                </foreach>
            </trim>
            <trim prefix="content = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.content != null">
                        when id = #{item.id,jdbcType=BIGINT} then #{item.content,jdbcType=LONGVARCHAR}
                    </if>
                </foreach>
            </trim>
            <trim prefix="'status' = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.status != null">
                        when id = #{item.id,jdbcType=BIGINT} then #{item.status,jdbcType=VARCHAR}
                    </if>
                </foreach>
            </trim>
            <trim prefix="create_by = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.createBy != null">
                        when id = #{item.id,jdbcType=BIGINT} then #{item.createBy,jdbcType=VARCHAR}
                    </if>
                </foreach>
            </trim>
            <trim prefix="create_time = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.createTime != null">
                        when id = #{item.id,jdbcType=BIGINT} then #{item.createTime,jdbcType=TIMESTAMP}
                    </if>
                </foreach>
            </trim>
            <trim prefix="update_by = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.updateBy != null">
                        when id = #{item.id,jdbcType=BIGINT} then #{item.updateBy,jdbcType=VARCHAR}
                    </if>
                </foreach>
            </trim>
            <trim prefix="update_time = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.updateTime != null">
                        when id = #{item.id,jdbcType=BIGINT} then #{item.updateTime,jdbcType=TIMESTAMP}
                    </if>
                </foreach>
            </trim>
            <trim prefix="remark = case" suffix="end,">
                <foreach collection="list" index="index" item="item">
                    <if test="item.remark != null">
                        when id = #{item.id,jdbcType=BIGINT} then #{item.remark,jdbcType=VARCHAR}
                    </if>
                </foreach>
            </trim>
        </trim>
        where id in
        <foreach close=")" collection="list" item="item" open="(" separator=", ">
            #{item.id,jdbcType=BIGINT}
        </foreach>
    </update>
    <insert id="batchInsert" keyColumn="id" keyProperty="id" parameterType="map" useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into protocol
        (product_identification, protocol_name, protocol_identification, protocol_version,
         protocol_type, protocol_voice, class_name, file_path, content, "status", create_by,
         create_time, update_by, update_time, remark)
        values
        <foreach collection="list" item="item" separator=",">
            (#{item.productIdentification,jdbcType=VARCHAR}, #{item.protocolName,jdbcType=VARCHAR},
             #{item.protocolIdentification,jdbcType=VARCHAR}, #{item.protocolVersion,jdbcType=VARCHAR},
             #{item.protocolType,jdbcType=VARCHAR}, #{item.protocolVoice,jdbcType=VARCHAR},
             #{item.className,jdbcType=VARCHAR}, #{item.filePath,jdbcType=VARCHAR},
             #{item.content,jdbcType=LONGVARCHAR},
             #{item.status,jdbcType=VARCHAR}, #{item.createBy,jdbcType=VARCHAR}, #{item.createTime,jdbcType=TIMESTAMP},
             #{item.updateBy,jdbcType=VARCHAR}, #{item.updateTime,jdbcType=TIMESTAMP}, #{item.remark,jdbcType=VARCHAR})
        </foreach>
    </insert>
    <insert id="insertOrUpdate" keyColumn="id" keyProperty="id"
            parameterType="com.basiclab.iot.device.domain.device.vo.Protocol" useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into protocol
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            product_identification,
            protocol_name,
            protocol_identification,
            protocol_version,
            protocol_type,
            protocol_voice,
            class_name,
            file_path,
            content,
            "status",
            create_by,
            create_time,
            update_by,
            update_time,
            remark,
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            #{productIdentification,jdbcType=VARCHAR},
            #{protocolName,jdbcType=VARCHAR},
            #{protocolIdentification,jdbcType=VARCHAR},
            #{protocolVersion,jdbcType=VARCHAR},
            #{protocolType,jdbcType=VARCHAR},
            #{protocolVoice,jdbcType=VARCHAR},
            #{className,jdbcType=VARCHAR},
            #{filePath,jdbcType=VARCHAR},
            #{content,jdbcType=LONGVARCHAR},
            #{status,jdbcType=VARCHAR},
            #{createBy,jdbcType=VARCHAR},
            #{createTime,jdbcType=TIMESTAMP},
            #{updateBy,jdbcType=VARCHAR},
            #{updateTime,jdbcType=TIMESTAMP},
            #{remark,jdbcType=VARCHAR},
        </trim>
        ON CONFLICT (id) DO UPDATE SET
        <trim suffixOverrides=",">
            product_identification  = EXCLUDED.product_identification,
            protocol_name           = EXCLUDED.protocol_name,
            protocol_identification = EXCLUDED.protocol_identification,
            protocol_version        = EXCLUDED.protocol_version,
            protocol_type           = EXCLUDED.protocol_type,
            protocol_voice          = EXCLUDED.protocol_voice,
            class_name              = EXCLUDED.class_name,
            file_path               = EXCLUDED.file_path,
            content                 = EXCLUDED.content,
            "status"                = EXCLUDED.status,
            create_by               = EXCLUDED.create_by,
            create_time             = EXCLUDED.create_time,
            update_by               = EXCLUDED.update_by,
            update_time             = EXCLUDED.update_time,
            remark                  = EXCLUDED.remark,
        </trim>
    </insert>
    <insert id="insertOrUpdateSelective" keyColumn="id" keyProperty="id"
            parameterType="com.basiclab.iot.device.domain.device.vo.Protocol" useGeneratedKeys="true">
        <!--@mbg.generated-->
        insert into protocol
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="productIdentification != null">
                product_identification,
            </if>
            <if test="protocolName != null">
                protocol_name,
            </if>
            <if test="protocolIdentification != null">
                protocol_identification,
            </if>
            <if test="protocolVersion != null">
                protocol_version,
            </if>
            <if test="protocolType != null">
                protocol_type,
            </if>
            <if test="protocolVoice != null">
                protocol_voice,
            </if>
            <if test="className != null">
                class_name,
            </if>
            <if test="filePath != null">
                file_path,
            </if>
            <if test="content != null">
                content,
            </if>
            <if test="status != null">
                "status",
            </if>
            create_by,
            create_time,
            update_by,
            update_time,
            <if test="remark != null">
                remark,
            </if>
        </trim>
        values
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="productIdentification != null">
                #{productIdentification,jdbcType=VARCHAR},
            </if>
            <if test="protocolName != null">
                #{protocolName,jdbcType=VARCHAR},
            </if>
            <if test="protocolIdentification != null">
                #{protocolIdentification,jdbcType=VARCHAR},
            </if>
            <if test="protocolVersion != null">
                #{protocolVersion,jdbcType=VARCHAR},
            </if>
            <if test="protocolType != null">
                #{protocolType,jdbcType=VARCHAR},
            </if>
            <if test="protocolVoice != null">
                #{protocolVoice,jdbcType=VARCHAR},
            </if>
            <if test="className != null">
                #{className,jdbcType=VARCHAR},
            </if>
            <if test="filePath != null">
                #{filePath,jdbcType=VARCHAR},
            </if>
            <if test="content != null">
                #{content,jdbcType=LONGVARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=VARCHAR},
            </if>
            #{createBy,jdbcType=VARCHAR},
            #{createTime,jdbcType=TIMESTAMP},
            #{updateBy,jdbcType=VARCHAR},
            #{updateTime,jdbcType=TIMESTAMP},
            <if test="remark != null">
                #{remark,jdbcType=VARCHAR},
            </if>
        </trim>
        ON CONFLICT (id) DO UPDATE SET
        <trim suffixOverrides=",">
            <if test="productIdentification != null">
                product_identification = EXCLUDED.product_identification,
            </if>
            <if test="protocolName != null">
                protocol_name = EXCLUDED.protocol_name,
            </if>
            <if test="protocolIdentification != null">
                protocol_identification = EXCLUDED.protocol_identification,
            </if>
            <if test="protocolVersion != null">
                protocol_version = EXCLUDED.protocol_version,
            </if>
            <if test="protocolType != null">
                protocol_type = EXCLUDED.protocol_type,
            </if>
            <if test="protocolVoice != null">
                protocol_voice = EXCLUDED.protocol_voice,
            </if>
            <if test="className != null">
                class_name = EXCLUDED.class_name,
            </if>
            <if test="filePath != null">
                file_path = EXCLUDED.file_path,
            </if>
            <if test="content != null">
                content = EXCLUDED.content,
            </if>
            <if test="status != null">
                "status" = EXCLUDED.status,
            </if>
            <if test="createBy != null">
                create_by = EXCLUDED.create_by,
            </if>
            <if test="createTime != null">
                create_time = EXCLUDED.create_time,
            </if>
            <if test="updateBy != null">
                update_by = EXCLUDED.update_by,
            </if>
            <if test="updateTime != null">
                update_time = EXCLUDED.update_time,
            </if>
            <if test="remark != null">
                remark = EXCLUDED.remark,
            </if>
        </trim>
    </insert>

    <sql id="selectProtocolVo">
        select id,
               app_id,
               product_identification,
               protocol_name,
               protocol_identification,
               protocol_version,
               protocol_type,
               protocol_voice,
               class_name,
               file_path,
               content,
               status,
               create_by,
               create_time,
               update_by,
               update_time,
               remark
        from protocol
    </sql>

    <select id="selectProtocolList" parameterType="com.basiclab.iot.device.domain.device.vo.Protocol"
            resultMap="BaseResultMap">
        <include refid="selectProtocolVo"/>
        <where>
            <if test="productIdentification != null  and productIdentification != ''">
                and product_identification = #{productIdentification}
            </if>
            <if test="protocolName != null  and protocolName != ''">
                and protocol_name like concat('%', #{protocolName}::varchar, '%')
            </if>
            <if test="protocolIdentification != null  and protocolIdentification != ''">
                and protocol_identification = #{protocolIdentification}
            </if>
            <if test="protocolVersion != null  and protocolVersion != ''">
                and protocol_version = #{protocolVersion}
            </if>
            <if test="protocolType != null  and protocolType != ''">
                and protocol_type = #{protocolType}
            </if>
            <if test="protocolVoice != null  and protocolVoice != ''">
                and protocol_voice = #{protocolVoice}
            </if>
            <if test="className != null  and className != ''">
                and class_name like concat('%', #{className}::varchar, '%')
            </if>
            <if test="filePath != null  and filePath != ''">
                and file_path = #{filePath}
            </if>
            <if test="content != null  and content != ''">
                and content = #{content}
            </if>
            <if test="status != null  and status != ''">
                and status = #{status}
            </if>
        </where>
    </select>

    <select id="selectProtocolById" parameterType="Long" resultMap="BaseResultMap">
        <include refid="selectProtocolVo"/>
        where id = #{id}
    </select>

    <insert id="insertProtocol" parameterType="com.basiclab.iot.device.domain.device.vo.Protocol"
            useGeneratedKeys="true" keyProperty="id">
        insert into protocol
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="productIdentification != null and productIdentification != ''">
                product_identification,
            </if>
            <if test="appId != null and appId != ''">
                app_id,
            </if>
            <if test="protocolName != null">
                protocol_name,
            </if>
            <if test="protocolIdentification != null">
                protocol_identification,
            </if>
            <if test="protocolVersion != null">
                protocol_version,
            </if>
            <if test="protocolType != null">
                protocol_type,
            </if>
            <if test="protocolVoice != null">
                protocol_voice,
            </if>
            <if test="className != null">
                class_name,
            </if>
            <if test="filePath != null">
                file_path,
            </if>
            <if test="content != null">
                content,
            </if>
            <if test="status != null and status != ''">
                status,
            </if>
            create_by,
            create_time,
            update_by,
            update_time,
            <if test="remark != null">
                remark,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="productIdentification != null and productIdentification != ''">
                #{productIdentification},
            </if>
            <if test="appId != null and appId != ''">
                #{appId},
            </if>
            <if test="protocolName != null">
                #{protocolName},
            </if>
            <if test="protocolIdentification != null">
                #{protocolIdentification},
            </if>
            <if test="protocolVersion != null">
                #{protocolVersion},
            </if>
            <if test="protocolType != null">
                #{protocolType},
            </if>
            <if test="protocolVoice != null">
                #{protocolVoice},
            </if>
            <if test="className != null">
                #{className},
            </if>
            <if test="filePath != null">
                #{filePath},
            </if>
            <if test="content != null">
                #{content},
            </if>
            <if test="status != null and status != ''">
                #{status},
            </if>
            #{createBy},
            <if test="createTime != null">
                #{createTime},
            </if>
            #{updateBy},
            <if test="updateTime != null">
                #{updateTime},
            </if>
            <if test="remark != null">
                #{remark},
            </if>
        </trim>
    </insert>

    <update id="updateProtocol" parameterType="com.basiclab.iot.device.domain.device.vo.Protocol">
        update protocol
        <trim prefix="SET" suffixOverrides=",">
            <if test="productIdentification != null and productIdentification != ''">
                product_identification = #{productIdentification},
            </if>
            <if test="appId != null and appId != ''">
                app_id = #{appId,jdbcType=VARCHAR},
            </if>
            <if test="protocolName != null">
                protocol_name = #{protocolName},
            </if>
            <if test="protocolIdentification != null">
                protocol_identification = #{protocolIdentification},
            </if>
            <if test="protocolVersion != null">
                protocol_version = #{protocolVersion},
            </if>
            <if test="protocolType != null">
                protocol_type = #{protocolType},
            </if>
            <if test="protocolVoice != null">
                protocol_voice = #{protocolVoice},
            </if>
            <if test="className != null">
                class_name = #{className},
            </if>
            <if test="filePath != null">
                file_path = #{filePath},
            </if>
            <if test="content != null">
                content = #{content},
            </if>
            <if test="status != null and status != ''">
                status = #{status},
            </if>
            <if test="createBy != null">
                create_by = #{createBy},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
            update_by = #{updateBy},
            update_time = #{updateTime},
            <if test="remark != null">
                remark = #{remark},
            </if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteProtocolByIds" parameterType="String">
        delete
        from protocol where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <!--Author  By ShiHuan Sun  E-mail: 853017739@qq.com on 2024-07-05-->
    <select id="findOneByProductIdentificationAndProtocolTypeAndStatus" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from protocol
        where product_identification = #{productIdentification,jdbcType=VARCHAR}
          and protocol_type = #{protocolType,jdbcType=VARCHAR}
          and "status" = #{status,jdbcType=VARCHAR}
    </select>

    <!--Author  By ShiHuan Sun  E-mail: 853017739@qq.com on 2024-07-05-->
    <select id="findAllByIdIn" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from protocol
        where id in
        <foreach item="item" index="index" collection="idCollection"
                 open="(" separator="," close=")">
            #{item,jdbcType=BIGINT}
        </foreach>
    </select>

    <!--Author  By ShiHuan Sun  E-mail: 853017739@qq.com on 2024-07-05-->
    <update id="updateStatusById">
        update protocol
        set "status"=#{updatedStatus,jdbcType=VARCHAR}
        where id = #{id,jdbcType=BIGINT}
    </update>

    <!--Author  By ShiHuan Sun  E-mail: 853017739@qq.com on 2024-07-11-->
    <select id="findAllByStatus" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from protocol
        where "status" = #{status,jdbcType=VARCHAR}
    </select>
</mapper>
