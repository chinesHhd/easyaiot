<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.basiclab.iot.stream.mapper.DeviceMapper">

    <!-- 根据设备ID查询设备 (PostgreSQL) -->
    <select id="getDeviceByDeviceId" resultType="com.basiclab.iot.stream.bean.Device">
        SELECT id,
               device_id,
               COALESCE(custom_name, name) AS name,
               password,
               manufacturer,
               model,
               firmware,
               transport,
               stream_mode,
               ip,
               sdp_ip,
               local_ip,
               port,
               host_address,
               expires,
               register_time,
               keepalive_time,
               create_time,
               update_time,
               charset,
               subscribe_cycle_for_catalog,
               subscribe_cycle_for_mobile_position,
               mobile_position_submission_interval,
               subscribe_cycle_for_alarm,
               ssrc_check,
               as_message_channel,
               broadcast_push_after_ack,
               geo_coord_sys,
               on_line,
               server_id,
               media_server_id,
               (SELECT COUNT(0)
                FROM wvp_device_channel dc
                WHERE dc.data_type = 1
                  AND dc.data_device_id = de.id) AS channel_count
        FROM wvp_device de
        WHERE de.device_id = #{deviceId}
    </select>

    <!-- 添加设备 (PostgreSQL) -->
    <insert id="add" parameterType="com.basiclab.iot.stream.bean.Device"
            useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO wvp_device (
            device_id, name, manufacturer, model, firmware, transport,
            stream_mode, media_server_id, ip, sdp_ip, local_ip, port,
            host_address, expires, register_time, keepalive_time, heart_beat_interval,
            heart_beat_count, position_capability, create_time, update_time, charset,
            subscribe_cycle_for_catalog, subscribe_cycle_for_mobile_position,
            mobile_position_submission_interval, subscribe_cycle_for_alarm, ssrc_check,
            as_message_channel, broadcast_push_after_ack, geo_coord_sys, server_id, on_line
        ) VALUES (
                     #{deviceId}, #{name}, #{manufacturer}, #{model}, #{firmware}, #{transport},
                     #{streamMode}, #{mediaServerId}, #{ip}, #{sdpIp}, #{localIp}, #{port},
                     #{hostAddress}, #{expires}, #{registerTime}, #{keepaliveTime}, #{heartBeatInterval},
                     #{heartBeatCount}, #{positionCapability}, #{createTime}, #{updateTime}, #{charset},
                     #{subscribeCycleForCatalog}, #{subscribeCycleForMobilePosition},
                     #{mobilePositionSubmissionInterval}, #{subscribeCycleForAlarm}, #{ssrcCheck},
                     #{asMessageChannel}, #{broadcastPushAfterAck}, #{geoCoordSys}, #{serverId}, #{onLine}
                 )
    </insert>

    <!-- 更新设备 (PostgreSQL) -->
    <update id="update" parameterType="com.basiclab.iot.stream.bean.Device">
        UPDATE wvp_device
        SET update_time = #{updateTime},
            name = #{name},
            manufacturer = #{manufacturer},
            model = #{model},
            firmware = #{firmware},
            transport = #{transport},
            ip = #{ip},
            local_ip = #{localIp},
            port = #{port},
            host_address = #{hostAddress},
            on_line = #{onLine},
            register_time = #{registerTime},
            keepalive_time = #{keepaliveTime},
            heart_beat_interval = #{heartBeatInterval},
            position_capability = #{positionCapability},
            heart_beat_count = #{heartBeatCount},
            subscribe_cycle_for_catalog = #{subscribeCycleForCatalog},
            subscribe_cycle_for_mobile_position = #{subscribeCycleForMobilePosition},
            mobile_position_submission_interval = #{mobilePositionSubmissionInterval},
            subscribe_cycle_for_alarm = #{subscribeCycleForAlarm},
            expires = #{expires},
            server_id = #{serverId}
        WHERE device_id = #{deviceId}
    </update>

    <!-- 获取设备列表 (PostgreSQL) -->
    <select id="getDevices" resultType="com.basiclab.iot.stream.bean.Device">
        SELECT
        id,
        device_id,
        COALESCE(custom_name, name) AS name,
        password,
        manufacturer,
        model,
        firmware,
        transport,
        stream_mode,
        ip,
        sdp_ip,
        local_ip,
        port,
        host_address,
        expires,
        register_time,
        keepalive_time,
        create_time,
        update_time,
        charset,
        subscribe_cycle_for_catalog,
        subscribe_cycle_for_mobile_position,
        mobile_position_submission_interval,
        subscribe_cycle_for_alarm,
        ssrc_check,
        as_message_channel,
        broadcast_push_after_ack,
        geo_coord_sys,
        on_line,
        media_server_id,
        (SELECT COUNT(0)
        FROM wvp_device_channel dc
        WHERE dc.data_type = #{dataType}
        AND dc.data_device_id = de.id) AS channel_count
        FROM wvp_device de
        <if test="online != null">
            WHERE de.on_line = #{online}
        </if>
        ORDER BY de.create_time DESC
    </select>

    <!-- 删除设备 -->
    <delete id="del">
        DELETE
        FROM wvp_device
        WHERE device_id = #{deviceId}
    </delete>

    <!-- 获取在线设备 -->
    <select id="getOnlineDevices" resultType="com.basiclab.iot.stream.bean.Device">
        SELECT id,
               device_id,
               COALESCE(custom_name, name) AS name,
               password,
               manufacturer,
               model,
               firmware,
               transport,
               stream_mode,
               ip,
               sdp_ip,
               local_ip,
               port,
               host_address,
               expires,
               register_time,
               keepalive_time,
               create_time,
               update_time,
               charset,
               subscribe_cycle_for_catalog,
               subscribe_cycle_for_mobile_position,
               mobile_position_submission_interval,
               subscribe_cycle_for_alarm,
               ssrc_check,
               as_message_channel,
               broadcast_push_after_ack,
               geo_coord_sys,
               server_id,
               on_line
        FROM wvp_device
        WHERE on_line = true
    </select>

    <!-- 根据服务器ID获取在线设备 -->
    <select id="getOnlineDevicesByServerId" resultType="com.basiclab.iot.stream.bean.Device">
        SELECT id,
               device_id,
               COALESCE(custom_name, name) AS name,
               password,
               manufacturer,
               model,
               firmware,
               transport,
               stream_mode,
               ip,
               sdp_ip,
               local_ip,
               port,
               host_address,
               expires,
               register_time,
               keepalive_time,
               create_time,
               update_time,
               charset,
               subscribe_cycle_for_catalog,
               subscribe_cycle_for_mobile_position,
               mobile_position_submission_interval,
               subscribe_cycle_for_alarm,
               ssrc_check,
               as_message_channel,
               broadcast_push_after_ack,
               geo_coord_sys,
               server_id,
               on_line
        FROM wvp_device
        WHERE on_line = true
          AND server_id = #{serverId}
    </select>

    <!-- 根据主机和端口查询设备 -->
    <select id="getDeviceByHostAndPort" resultType="com.basiclab.iot.stream.bean.Device">
        SELECT id,
               device_id,
               COALESCE(custom_name, name) AS name,
               password,
               manufacturer,
               model,
               firmware,
               transport,
               stream_mode,
               ip,
               sdp_ip,
               local_ip,
               port,
               host_address,
               expires,
               register_time,
               keepalive_time,
               create_time,
               update_time,
               charset,
               subscribe_cycle_for_catalog,
               subscribe_cycle_for_mobile_position,
               mobile_position_submission_interval,
               subscribe_cycle_for_alarm,
               ssrc_check,
               as_message_channel,
               broadcast_push_after_ack,
               geo_coord_sys,
               on_line
        FROM wvp_device
        WHERE ip = #{host}
          AND port = #{port}
    </select>

    <!-- 更新设备自定义信息 -->
    <update id="updateCustom" parameterType="com.basiclab.iot.stream.bean.Device">
        UPDATE wvp_device
        SET update_time = #{updateTime},
            custom_name = #{name},
            password = #{password},
            stream_mode = #{streamMode},
            ip = #{ip},
            sdp_ip = #{sdpIp},
            port = #{port},
            charset = #{charset},
            ssrc_check = #{ssrcCheck},
            as_message_channel = #{asMessageChannel},
            broadcast_push_after_ack = #{broadcastPushAfterAck},
            geo_coord_sys = #{geoCoordSys},
            media_server_id = #{mediaServerId}
        WHERE id = #{id}
    </update>

    <!-- 添加自定义设备 (PostgreSQL) -->
    <insert id="addCustomDevice" parameterType="com.basiclab.iot.stream.bean.Device"
            useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO wvp_device (
            device_id,
            custom_name,
            password,
            sdp_ip,
            create_time,
            update_time,
            charset,
            ssrc_check,
            as_message_channel,
            broadcast_push_after_ack,
            geo_coord_sys,
            on_line,
            stream_mode,
            server_id,
            media_server_id
        ) VALUES (
                     #{deviceId},
                     #{name},
                     #{password},
                     #{sdpIp},
                     #{createTime},
                     #{updateTime},
                     #{charset},
                     #{ssrcCheck},
                     #{asMessageChannel},
                     #{broadcastPushAfterAck},
                     #{geoCoordSys},
                     #{onLine},
                     #{streamMode},
                     #{serverId},
                     #{mediaServerId}
                 )
    </insert>

    <!-- 获取所有设备 -->
    <select id="getAll" resultType="com.basiclab.iot.stream.bean.Device">
        SELECT *
        FROM wvp_device
    </select>

    <!-- 查询带消息通道的设备 -->
    <select id="queryDeviceWithAsMessageChannel" resultType="com.basiclab.iot.stream.bean.Device">
        SELECT *
        FROM wvp_device
        WHERE as_message_channel = true
    </select>

    <!-- 获取设备列表（带过滤条件） (PostgreSQL) -->
    <select id="getDeviceList" resultType="com.basiclab.iot.stream.bean.Device">
        SELECT
        COALESCE(custom_name, name) AS name,
        id,
        device_id,
        manufacturer,
        model,
        firmware,
        transport,
        stream_mode,
        on_line,
        register_time,
        keepalive_time,
        ip,
        create_time,
        update_time,
        port,
        expires,
        subscribe_cycle_for_catalog,
        subscribe_cycle_for_mobile_position,
        mobile_position_submission_interval,
        subscribe_cycle_for_alarm,
        host_address,
        charset,
        ssrc_check,
        geo_coord_sys,
        media_server_id,
        sdp_ip,
        local_ip,
        password,
        as_message_channel,
        heart_beat_interval,
        heart_beat_count,
        position_capability,
        broadcast_push_after_ack,
        server_id,
        (SELECT COUNT(0)
        FROM wvp_device_channel dc
        WHERE dc.data_type = #{dataType}
        AND dc.data_device_id = de.id) AS channel_count
        FROM wvp_device de
        WHERE 1 = 1
        <if test="status != null">
            AND de.on_line = #{status}
        </if>
        <if test="query != null and query != ''">
            AND (
            COALESCE(custom_name, name) LIKE '%' || #{query} || '%' ESCAPE '/'
            OR device_id LIKE '%' || #{query} || '%' ESCAPE '/'
            OR ip LIKE '%' || #{query} || '%' ESCAPE '/'
            )
        </if>
        ORDER BY create_time DESC, device_id
    </select>

    <!-- 获取原始通道 -->
    <select id="getRawChannel" resultType="com.basiclab.iot.stream.bean.DeviceChannel">
        SELECT *
        FROM wvp_device_channel
        WHERE id = #{id}
    </select>

    <!-- 根据ID查询设备 -->
    <select id="query" resultType="com.basiclab.iot.stream.bean.Device">
        SELECT *
        FROM wvp_device
        WHERE id = #{id}
    </select>

    <!-- 根据通道ID查询设备 -->
    <select id="queryByChannelId" resultType="com.basiclab.iot.stream.bean.Device">
        SELECT wd.*
        FROM wvp_device wd
                 JOIN wvp_device_channel wdc
                      ON wdc.data_type = #{dataType}
                          AND wd.id = wdc.data_device_id
        WHERE wdc.id = #{channelId}
    </select>

    <!-- 根据源通道设备ID查询设备 -->
    <select id="getDeviceBySourceChannelDeviceId" resultType="com.basiclab.iot.stream.bean.Device">
        SELECT wd.*
        FROM wvp_device wd
                 JOIN wvp_device_channel wdc
                      ON wdc.data_type = #{dataType}
                          AND wd.id = wdc.data_device_id
        WHERE wdc.device_id = #{channelDeviceId}
    </select>

    <!-- 更新设备目录订阅周期 -->
    <update id="updateSubscribeCatalog">
        UPDATE wvp_device
        SET subscribe_cycle_for_catalog = #{subscribeCycleForCatalog}
        WHERE id = #{id}
    </update>

    <!-- 更新设备移动位置订阅 -->
    <update id="updateSubscribeMobilePosition">
        UPDATE wvp_device
        SET subscribe_cycle_for_mobile_position = #{subscribeCycleForMobilePosition},
            mobile_position_submission_interval = #{mobilePositionSubmissionInterval}
        WHERE id = #{id}
    </update>

    <!-- 批量离线设备 (PostgreSQL) -->
    <update id="offlineByList">
        UPDATE wvp_device
        SET on_line = false
        WHERE id IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item.id}
        </foreach>
    </update>

</mapper>